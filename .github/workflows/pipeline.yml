name: Pipeline test deployment

on:
  pull_request:
    branches: ["*"]
  push:
    branches: ["master"]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          coverage: xdebug

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Composer packages
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: Install Dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

  test:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          coverage: xdebug

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Composer packages
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: Install Dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"

      - name: Generate key
        run: php artisan key:generate

      - name: Set Directory Permissions
        run: chmod -R 777 storage bootstrap/cache

      - name: Create Database
        run: |
          mkdir -p database
          touch database/database.sqlite

      - name: Run tests with phpunit/phpunit
        env:
          DB_CONNECTION: sqlite
          DB_DATABASE: database/database.sqlite
        run: vendor/bin/phpunit --coverage-clover=coverage.xml

      - name: Store coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml

  sonar:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  

      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECTKEY }}
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.php.coverage.reportPaths=coverage.xml

  deploy-to-dockerhub:
    needs: sonar
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Read current version
        id: get_version
        run: echo "VERSION=$(cat version.txt)" >> $GITHUB_ENV

      - name: Increment patch version
        id: increment_version
        run: |
          VERSION=${{ env.VERSION }}
          IFS='.' read -ra ADDR <<< "$VERSION"
          PATCH=$((ADDR[2] + 1))
          NEW_VERSION="${ADDR[0]}.${ADDR[1]}.$PATCH"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo $NEW_VERSION > version.txt
        shell: bash

      - name: Debugging Information
        run: |
          git remote -v
          git status

      - name: Build and push Docker images
        run: |
          docker-compose -f docker-compose.yml build
          docker tag app:latest wolwer/hacka-app:${{ env.NEW_VERSION }}
          docker tag nginx:latest wolwer/hacka-nginx:${{ env.NEW_VERSION }}
          docker push wolwer/hacka-app:${{ env.NEW_VERSION }}
          docker push wolwer/hacka-nginx:${{ env.NEW_VERSION }}